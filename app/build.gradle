apply plugin: 'com.android.application'

android {

    def versionPropsFile = file('version.properties')
    def versionBuild

    /*Carrega o arquivo version.properties e coloca a variavel VERSION_BUILD em def versionBuild*/
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        versionBuild = versionProps['VERSION_BUILD'].toInteger()
    } else {
        throw new FileNotFoundException("Could not read version.properties!")
    }

    /*Wrapping inside a method avoids auto incrementing on every gradle task run. Now it runs only when we build apk*/
    ext.autoIncrementBuildNumber = {
        if (versionPropsFile.canRead()) {
            Properties versionProps = new Properties()
            versionProps.load(new FileInputStream(versionPropsFile))
            versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1
            versionProps['VERSION_BUILD'] = versionBuild.toString()
            versionProps.store(versionPropsFile.newWriter(), null)
        } else {
            throw new FileNotFoundException("Could not read version.properties!")
        }
    }

    signingConfigs {

        relese {
            keyAlias 'teste'
            keyPassword 'testeteste'
            storeFile file('../key/keytest.jks')
            storePassword 'testeteste'
        }

        debug {
            keyAlias 'teste'
            keyPassword 'testeteste'
            storeFile file('../key/debug.jks')
            storePassword 'testeteste'
        }

    }
    compileSdkVersion 28
    defaultConfig {
        applicationId "quanticheart.com.buildvariants"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName "1.0.0-" + versionBuild
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        def filesAuthorityValueBase = "quanticheart.com.buildvariants.files"
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.relese

            def filesAuthority = filesAuthorityValueBase + ".fileprovider"

            manifestPlaceholders = [
                    appIcon       : "@mipmap/ic_launcher",
                    appName       : "@string/app_name",
                    filesAuthority: filesAuthority
            ]

            buildConfigField 'String', 'BuildMsg', '"App"'
            buildConfigField "boolean", "isDebug", "false"
            buildConfigField("String", "FILES_AUTHORITY", "\"${filesAuthority}\"")

            resValue "string", "FILES_AUTHORITY", filesAuthority

        }

        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix '.debug'
            versionNameSuffix '-Debug'

            def filesAuthority = filesAuthorityValueBase + ".debug.fileprovider"

            manifestPlaceholders = [
                    appIcon       : "@mipmap/ic_launcher_debug",
                    appName       : "@string/app_name_debug",
                    filesAuthority: filesAuthority
            ]

            buildConfigField 'String', 'BuildMsg', '"App Debug"'
            buildConfigField "boolean", "isDebug", "true"
            buildConfigField("String", "FILES_AUTHORITY", "\"${filesAuthority}\"")

            resValue "string", "FILES_AUTHORITY", filesAuthority

        }

        applicationVariants.all { variant ->
            def appName
            //Check if an applicationName property is supplied; if not use the name of the parent project.
            if (project.hasProperty("applicationName")) {
                appName = applicationName
            } else {
                appName = parent.name
            }

            variant.outputs.all {
                if (variant.buildType.name == "debug") {
                    outputFileName = "${appName}-${variant.versionName}-test.apk"
                } else {
                    outputFileName = "${appName}-${variant.versionName}.apk"
                    outputFileName = "../../" + outputFileName
                }
            }
        }
    }

    // Hook to check if the release/debug task is among the tasks to be executed.
    //Let's make use of it
    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask(assembleDebug)) {  /* when run debug task */
            autoIncrementBuildNumber()
        } else if (taskGraph.hasTask(assembleRelease)) { /* when run release task */
            autoIncrementBuildNumber()
        }
    }
}

ext {
    appCompatVersion = '28.0.0'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:appcompat-v7:$appCompatVersion"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
